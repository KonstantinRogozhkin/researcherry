diff --git a/src/vs/workbench/workbench.common.main.ts b/src/vs/workbench/workbench.common.main.ts
index xxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxx 100644
--- a/src/vs/workbench/workbench.common.main.ts
+++ b/src/vs/workbench/workbench.common.main.ts
@@ -318,6 +318,9 @@ import './contrib/chat/browser/chat.contribution.js';
 import './contrib/inlineChat/browser/inlineChat.contribution.js';
 import './contrib/mcp/browser/mcp.contribution.js';
 
+// Researcherry
+import './contrib/researcherry/browser/researcherry.js';
+
 // Interactive
 import './contrib/interactive/browser/interactive.contribution.js';
 
diff --git a/src/vs/workbench/contrib/researcherry/browser/researcherry.contribution.ts b/src/vs/workbench/contrib/researcherry/browser/researcherry.contribution.ts
new file mode 100644
index 0000000000..e9c5c0e0f1
--- /dev/null
+++ b/src/vs/workbench/contrib/researcherry/browser/researcherry.contribution.ts
@@ -0,0 +1,76 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import { localize } from '../../../base/common/localize.js';
+import { registerAction2, Action2 } from '../../../platform/actions/common/actions.js';
+import { ICommandService } from '../../../platform/commands/common/commands.js';
+import { ServicesAccessor } from '../../../platform/instantiation/common/instantiation.js';
+import { Registry } from '../../../platform/registry/common/platform.js';
+import { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry } from '../../common/contributions.js';
+import { LifecyclePhase } from '../../services/lifecycle/common/lifecycle.js';
+import { IStorageService, StorageScope, StorageTarget } from '../../../platform/storage/common/storage.js';
+import { IWorkbenchEnvironmentService } from '../../services/environment/common/environmentService.js';
+import { IWorkbenchProfileService } from '../../services/workbenchProfile/common/workbenchProfile.js';
+import { ILogService } from '../../../platform/log/common/log.js';
+
+// Команда для переключения в режим исследователя
+registerAction2(class extends Action2 {
+    constructor() {
+        super({
+            id: 'researcherry.switchToResearcherProfile',
+            title: localize('switchToResearcher', "Переключиться в режим исследователя"),
+            category: 'Researcherry',
+            f1: true // Показать в палитре команд
+        });
+    }
+    async run(accessor: ServicesAccessor) {
+        const commandService = accessor.get(ICommandService);
+        // Вызываем встроенную команду VS Code для переключения профиля
+        await commandService.executeCommand('workbench.profiles.actions.switchProfile', 'Исследователь');
+    }
+});
+
+// Команда для переключения в режим разработчика
+registerAction2(class extends Action2 {
+    constructor() {
+        super({
+            id: 'researcherry.switchToDeveloperProfile',
+            title: localize('switchToDeveloper', "Переключиться в режим разработчика"),
+            category: 'Researcherry',
+            f1: true
+        });
+    }
+    async run(accessor: ServicesAccessor) {
+        const commandService = accessor.get(ICommandService);
+        await commandService.executeCommand('workbench.profiles.actions.switchProfile', 'Разработчик');
+    }
+});
+
+// Контрибуция для автоматической установки профиля по умолчанию
+class ResearcherryProfileContribution {
+    private static readonly PROFILE_INITIALIZED_KEY = 'researcherry.profileInitialized';
+
+    constructor(
+        @IStorageService private readonly storageService: IStorageService,
+        @IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,
+        @IWorkbenchProfileService private readonly profileService: IWorkbenchProfileService,
+        @ICommandService private readonly commandService: ICommandService,
+        @ILogService private readonly logService: ILogService
+    ) {
+        this.initialize();
+    }
+
+    private async initialize(): Promise<void> {
+        // Проверяем, был ли уже установлен профиль
+        const profileInitialized = this.storageService.getBoolean(ResearcherryProfileContribution.PROFILE_INITIALIZED_KEY, StorageScope.APPLICATION, false);
+        
+        if (!profileInitialized) {
+            try {
+                this.logService.info('Researcherry: Устанавливаем профиль "Исследователь" по умолчанию');
+                // Устанавливаем профиль "Исследователь" по умолчанию для новых пользователей
+                await this.commandService.executeCommand('workbench.profiles.actions.switchProfile', 'Исследователь');
+                // Отмечаем, что профиль был установлен
+                this.storageService.store(ResearcherryProfileContribution.PROFILE_INITIALIZED_KEY, true, StorageScope.APPLICATION, StorageTarget.MACHINE);
+            } catch (error) {
+                this.logService.error('Researcherry: Ошибка при установке профиля по умолчанию', error);
+            }
+        }
+    }
+}
+
+// Регистрация контрибуции для автоматической загрузки
+Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench)
+    .registerWorkbenchContribution(ResearcherryProfileContribution, LifecyclePhase.Eventually);
diff --git a/src/vs/workbench/contrib/researcherry/browser/researcherry.ts b/src/vs/workbench/contrib/researcherry/browser/researcherry.ts
new file mode 100644
index 0000000000..4c9c8c0a0e
--- /dev/null
+++ b/src/vs/workbench/contrib/researcherry/browser/researcherry.ts
@@ -0,0 +1,7 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+// Импортируем контрибуцию для регистрации команд
+import './researcherry.contribution.js';
diff --git a/build/lib/i18n.resources.json b/build/lib/i18n.resources.json
index xxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxx 100644
--- a/build/lib/i18n.resources.json
+++ b/build/lib/i18n.resources.json
@@ -100,6 +100,10 @@
 		{
 			"name": "vs/workbench/contrib/preferences",
 			"project": "vscode-workbench"
+		},
+		{
+			"name": "vs/workbench/contrib/researcherry",
+			"project": "vscode-workbench"
 		},
 		{
 			"name": "vs/workbench/contrib/quickaccess",
